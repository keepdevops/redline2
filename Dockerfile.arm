# ARM64/Apple Silicon Optimized Dockerfile for REDLINE
# Optimized for ARM64 and Apple Silicon (M1/M2) processors

FROM --platform=linux/arm64 ubuntu:24.04

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV DISPLAY=:99

# Build arguments
ARG MODE=auto
ARG VNC_PORT=5900
ARG WEB_PORT=8080

# Labels for metadata
LABEL maintainer="REDLINE Team"
LABEL description="REDLINE Data Analyzer - ARM64/Apple Silicon Optimized"
LABEL version="1.0.0"
LABEL architecture="arm64"

# Install system dependencies optimized for ARM
RUN apt-get update && \
    apt-get install -y \
    # Core system packages
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    build-essential \
    curl \
    wget \
    git \
    # ARM-specific packages
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    # Web server packages
    nginx \
    # GUI support packages
    xvfb \
    x11vnc \
    fluxbox \
    # Additional utilities
    procps \
    htop \
    nano \
    vim \
    jq \
    unzip \
    # ARM optimization packages
    libopenblas-dev \
    liblapack-dev \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN useradd -m -s /bin/bash redline && \
    usermod -aG sudo redline

# Set working directory
WORKDIR /app

# Copy requirements first for better Docker layer caching
COPY requirements_docker.txt ./

# Install Python packages with ARM optimizations
RUN python3 -m pip install --upgrade pip setuptools wheel && \
    # Set ARM-specific environment variables for optimized builds
    export OPENBLAS_NUM_THREADS=4 && \
    export MKL_NUM_THREADS=4 && \
    export NUMEXPR_NUM_THREADS=4 && \
    export OMP_NUM_THREADS=4 && \
    # Install platform-specific packages first
    python3 -m pip install --no-cache-dir \
    numpy \
    pandas \
    matplotlib \
    seaborn \
    scipy \
    scikit-learn \
    && python3 -m pip install --no-cache-dir -r requirements_docker.txt

# Copy application files
COPY main.py data_config.ini ./
COPY redline/ ./redline/

# Create data directories with proper permissions
RUN mkdir -p data data/converted data/downloaded data/stooq_format && \
    chown -R redline:redline /app

# Copy entrypoint script
COPY entrypoint.sh ./
RUN chmod +x entrypoint.sh

# Copy launch scripts
COPY scripts/ ./scripts/
RUN chmod +x scripts/*.sh

# Create VNC password file (default password: redline123)
RUN mkdir -p /home/redline/.vnc && \
    echo "redline123" | vncpasswd -f > /home/redline/.vnc/passwd && \
    chmod 600 /home/redline/.vnc/passwd && \
    chown -R redline:redline /home/redline/.vnc

# Switch to non-root user
USER redline

# Expose ports
EXPOSE ${VNC_PORT} ${WEB_PORT}

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${WEB_PORT}/status || exit 1

# Set entrypoint
ENTRYPOINT ["./entrypoint.sh"]

# Default command
CMD ["--mode=auto"]
