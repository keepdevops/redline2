# REDLINE Docker Compose Configuration (Hybrid Approach)
# Combines working webgui with Docker Compose orchestration

version: '3.8'

services:
  # REDLINE Web App + Web GUI (using working Option 1 approach)
  redline-webgui:
    build:
      context: .
      dockerfile: Dockerfile.webgui.universal
    image: redline-webgui:latest
    container_name: redline-web-app
    restart: unless-stopped
    
    # Ports
    ports:
      - "8080:8080"    # Flask web app
      - "6080:6080"    # noVNC web GUI
    
    # Environment variables
    environment:
      - FLASK_APP=web_app.py
      - FLASK_ENV=production
      - HOST=0.0.0.0
      - PORT=8080
      - VNC_PASSWORD=redline123
      - DISPLAY=:1
      - VNC_PORT=5901
      - NO_VNC_PORT=6080
    
    # Volumes
    volumes:
      - ./data:/opt/redline/data
      - ./logs:/var/log/redline
      - ./config:/opt/redline/config
    
    # Working directory
    working_dir: /opt/redline
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

# Networks
networks:
  default:
    driver: bridge
