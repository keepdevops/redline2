# REDLINE Web-Based GUI Dockerfile (Universal)
# Uses noVNC + TigerVNC for web-based GUI access without X11 forwarding
# Compatible with all Docker versions

FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV DISPLAY=:1
ENV VNC_PORT=5901
ENV NO_VNC_PORT=6080
ENV VNC_RESOLUTION=1920x1080
ENV VNC_COL_DEPTH=24

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    unzip \
    supervisor \
    xfce4 \
    xfce4-goodies \
    tigervnc-standalone-server \
    tigervnc-common \
    python3 \
    python3-pip \
    python3-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libxext6 \
    libxrender1 \
    libxtst6 \
    libxi6 \
    firefox \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Tkinter (try multiple package names)
RUN apt-get update && \
    (apt-get install -y python3-tk || apt-get install -y python-tk || apt-get install -y tkinter || true) && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Tkinter via pip as fallback
RUN pip3 install tk || true

# Install websockify via pip
RUN pip3 install websockify || true

# Install noVNC
RUN mkdir -p /opt/noVNC && \
    cd /opt/noVNC && \
    wget -qO- https://github.com/novnc/noVNC/archive/v1.3.0.tar.gz | tar xz --strip 1

# Create VNC password
RUN mkdir -p ~/.vnc && \
    echo "redline123" | vncpasswd -f > ~/.vnc/passwd && \
    chmod 600 ~/.vnc/passwd

# Create VNC startup script
RUN echo '#!/bin/bash' > /start-vnc.sh && \
    echo 'vncserver :1 -geometry $VNC_RESOLUTION -depth $VNC_COL_DEPTH' >> /start-vnc.sh && \
    echo 'cd /opt/noVNC' >> /start-vnc.sh && \
    echo 'websockify --web /opt/noVNC $NO_VNC_PORT localhost:$VNC_PORT' >> /start-vnc.sh && \
    echo 'tail -f /dev/null' >> /start-vnc.sh && \
    chmod +x /start-vnc.sh

# Create desktop environment startup script
RUN echo '#!/bin/bash' > /start-desktop.sh && \
    echo 'startxfce4 &' >> /start-desktop.sh && \
    chmod +x /start-desktop.sh

# Create supervisor configuration
RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf && \
    echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '[program:vnc]' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'command=/start-vnc.sh' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '[program:desktop]' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'command=/start-desktop.sh' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'environment=DISPLAY=":1"' >> /etc/supervisor/conf.d/supervisord.conf

# Copy REDLINE application
COPY . /app
WORKDIR /app

# Install Python dependencies (compatible versions)
RUN pip3 install pandas numpy matplotlib seaborn plotly flask requests duckdb pyarrow fastparquet || true
RUN pip3 install flask-socketio flask-compress gunicorn || true
RUN pip3 install celery redis || true
RUN pip3 install scikit-learn || true
RUN pip3 install requests urllib3 || true
RUN pip3 install configparser || true
RUN pip3 install openpyxl xlsxwriter || true

# Create startup script for REDLINE GUI
RUN echo '#!/bin/bash' > /start-redline.sh && \
    echo 'cd /app' >> /start-redline.sh && \
    echo 'python3 main.py &' >> /start-redline.sh && \
    chmod +x /start-redline.sh

# Expose ports
EXPOSE 6080 5901

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:6080/ || exit 1

# Start services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
