name: Release Automation

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-pypi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools

    - name: Build PyPI packages
      run: |
        python -m build --outdir dist/packages/

    - name: Check package
      run: |
        twine check dist/packages/*

    - name: Upload to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/packages/*

  build-executables:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-latest
            platform: macos
            arch: x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executables
      run: |
        chmod +x build/scripts/build_executables.sh
        bash build/scripts/build_executables.sh

    - name: Upload executables
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/executables/

  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: redline-financial
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.working-insights
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  create-release:
    runs-on: ubuntu-latest
    needs: [build-pypi, build-executables, build-docker]
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release archives
      run: |
        chmod +x build/scripts/create_release.sh
        bash build/scripts/create_release.sh

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy PyPI packages
        cp dist/packages/* release-assets/ 2>/dev/null || true
        
        # Copy executables from all platforms
        find . -name "executables-*" -type d -exec cp -r {}/* release-assets/ \; 2>/dev/null || true
        
        # Copy release archives
        cp dist/releases/* release-assets/ 2>/dev/null || true
        
        # List all assets
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: REDLINE ${{ github.ref_name }}
        body: |
          ## REDLINE Financial Analysis Platform ${{ github.ref_name }}
          
          ### Installation Options
          
          #### PyPI Package (Recommended)
          ```bash
          pip install redline-financial
          redline-gui    # Start GUI
          redline-web    # Start Web App
          redline --help # CLI help
          ```
          
          #### Docker
          ```bash
          docker run -p 8080:8080 redline-financial:latest
          ```
          
          #### Executables
          Download the appropriate executable for your platform from the assets below.
          
          #### Source Archives
          Download and extract the source archives for manual installation.
          
          ### What's New
          - Multi-platform distribution support
          - PyPI package for easy installation
          - Standalone executables for all platforms
          - Docker images for containerized deployment
          - Comprehensive installation scripts
          
          ### System Requirements
          - Python 3.11+ (for PyPI/source installation)
          - Docker (for containerized installation)
          - 4GB+ RAM recommended
          - 2GB+ disk space
          
          ### Support
          - Documentation: [GitHub Repository](https://github.com/keepdevops/redline2)
          - Issues: [GitHub Issues](https://github.com/keepdevops/redline2/issues)
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "‚úÖ Release ${{ github.ref_name }} created successfully!"
        echo "üì¶ PyPI package published"
        echo "üê≥ Docker images pushed"
        echo "üíª Executables built for all platforms"
        echo "üìÅ Release archives created"
        
    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "Please check the workflow logs for details."