name: Multi-Platform Installer Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      build_all_arch:
        description: 'Build for all architectures (x64, ARM64)'
        required: false
        default: 'true'
        type: boolean

jobs:
  build-macos-dmg:
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event.inputs.version != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS executables (all architectures)
      run: |
        bash build/scripts/build_executables.sh --all-arch
        
    - name: Build macOS DMG
      run: |
        bash build/installers/macos/build_dmg.sh
        
    - name: Sign DMG (if certificate available)
      if: secrets.MACOS_CERT_ID != ''
      env:
        MACOS_CERT_ID: ${{ secrets.MACOS_CERT_ID }}
      run: |
        # Code signing would go here
        echo "Code signing with certificate: $MACOS_CERT_ID"
        
    - name: Upload macOS DMG
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: dist/installers/*.dmg

  build-windows-installer:
    runs-on: windows-latest
    if: github.event_name == 'push' || github.event.inputs.version != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executables (all architectures)
      run: |
        bash build/scripts/build_executables.sh --all-arch
        
    - name: Install NSIS
      run: choco install nsis -y
      
    - name: Build NSIS installer
      run: makensis build/installers/windows/redline.nsi
      
    - name: Install WiX Toolset
      run: choco install wixtoolset -y
      
    - name: Build MSI installer
      run: |
        candle build/installers/windows/redline.wxs
        light -out dist/installers/REDLINE-Setup.msi redline.wixobj
        
    - name: Sign Windows installers (optional)
      if: secrets.WINDOWS_CERT_BASE64 != ''
      run: |
        $cert = [System.Convert]::FromBase64String("${{ secrets.WINDOWS_CERT_BASE64 }}")
        [IO.File]::WriteAllBytes("cert.pfx", $cert)
        powershell build/signing/sign_windows.ps1 -InstallerPath "dist/installers/REDLINE-Setup.exe" -CertPath "cert.pfx" -CertPassword "${{ secrets.WINDOWS_CERT_PASSWORD }}"
        powershell build/signing/sign_windows.ps1 -InstallerPath "dist/installers/REDLINE-Setup.msi" -CertPath "cert.pfx" -CertPassword "${{ secrets.WINDOWS_CERT_PASSWORD }}"
        Remove-Item cert.pfx
        
    - name: Upload Windows installers
      uses: actions/upload-artifact@v4
      with:
        name: windows-installers
        path: dist/installers/*.exe dist/installers/*.msi

  build-ubuntu-deb:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.version != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Install DEB tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev debsigs lintian
        
    - name: Build Linux executables (all architectures)
      run: |
        bash build/scripts/build_executables.sh --all-arch
        
    - name: Build DEB packages (all architectures)
      run: |
        bash build/installers/ubuntu/build_deb.sh --all-arch
        
    - name: Sign DEB packages (optional)
      if: secrets.GPG_PRIVATE_KEY != ''
      env:
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
        for deb in dist/installers/*.deb; do
          bash build/signing/sign_deb.sh "$deb"
        done
        
    - name: Validate DEB packages
      run: |
        for deb in dist/installers/*.deb; do
          lintian "$deb" || echo "⚠️ Lintian warnings for $deb (normal for first build)"
        done
      
    - name: Upload Ubuntu DEB packages
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-deb
        path: dist/installers/*.deb

  create-release:
    needs: [build-macos-dmg, build-windows-installer, build-ubuntu-deb]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/macos-dmg/*.dmg
          artifacts/windows-installers/*.exe
          artifacts/windows-installers/*.msi
          artifacts/ubuntu-deb/*.deb
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


